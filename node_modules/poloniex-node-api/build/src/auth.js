"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedClient = void 0;
const public_1 = require("./public");
const signer_1 = require("./signer");
class AuthenticatedClient extends public_1.PublicClient {
  constructor({ key, secret, ...rest }) {
    super(rest);
    this.#key = key;
    this.#secret = secret;
    this.#nonce = () => Date.now();
  }
  #key;
  #secret;
  #nonce;
  async post(url, { body = new URLSearchParams() } = {}) {
    const nonce = this.nonce();
    body.set("nonce", `${nonce}`);
    const { key, sign } = signer_1.SignRequest({
      key: this.#key,
      secret: this.#secret,
      body: body.toString(),
    });
    const data = await super.post(url, { headers: { key, sign }, body });
    if (data.error) {
      throw new Error(data.error);
    } else if ("success" in data && !data.success) {
      throw new Error(data?.result?.error ?? data?.message);
    }
    return data;
  }
  /**
   * Get all of your balances available for trade after having deducted all open orders.
   */
  async getBalances() {
    const command = "returnBalances";
    const body = new URLSearchParams({ command });
    const balances = await this.post("/tradingApi", { body });
    return balances;
  }
  /**
   * Get all of your balances, including available balance, balance on orders, and the estimated BTC value of your balance.
   */
  async getCompleteBalances(form = {}) {
    const command = "returnCompleteBalances";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const balances = await this.post("/tradingApi", {
      body,
    });
    return balances;
  }
  /**
   * Get all of your deposit addresses.
   */
  async getDepositAddresses() {
    const command = "returnDepositAddresses";
    const body = new URLSearchParams({ command });
    const adresses = await this.post("/tradingApi", { body });
    return adresses;
  }
  /**
   * Generate a new deposit address.
   */
  async getNewAddress(form) {
    const command = "generateNewAddress";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const address = await this.post("/tradingApi", {
      body,
    });
    return address;
  }
  /**
   * Get your adjustment, deposit, and withdrawal history within a range window.
   */
  async getDepositsWithdrawals(form) {
    const command = "returnDepositsWithdrawals";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const records = await this.post("/tradingApi", {
      body,
    });
    return records;
  }
  /**
   * Get your open orders for a given market.
   */
  async getOpenOrders({ currencyPair = this.currencyPair } = {}) {
    const command = "returnOpenOrders";
    const body = new URLSearchParams({ command, currencyPair });
    const orders = await this.post("/tradingApi", { body });
    return orders;
  }
  /**
   * Get your trade history for a given market.
   */
  async getHistoryTrades({ currencyPair = this.currencyPair, ...form } = {}) {
    const command = "returnTradeHistory";
    const body = new URLSearchParams({ command, currencyPair });
    public_1.PublicClient.addOptions(body, { ...form });
    const trades = await this.post("/tradingApi", {
      body,
    });
    return trades;
  }
  /**
   * Get all trades involving a given order.
   */
  async getOrderTrades(form) {
    const command = "returnOrderTrades";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const trades = await this.post("/tradingApi", {
      body,
    });
    return trades;
  }
  /**
   * Get the status of a given order.
   */
  async getOrderStatus(form) {
    const command = "returnOrderStatus";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const order = await this.post("/tradingApi", {
      body,
    });
    return order;
  }
  /**
   * Places a limit buy order.
   */
  async buy({ currencyPair = this.currencyPair, ...form }) {
    const command = "buy";
    const body = new URLSearchParams({ command, currencyPair });
    public_1.PublicClient.addOptions(body, { ...form });
    const order = await this.post("/tradingApi", {
      body,
    });
    return order;
  }
  /**
   * Places a limit sell order.
   */
  async sell({ currencyPair = this.currencyPair, ...form }) {
    const command = "sell";
    const body = new URLSearchParams({ command, currencyPair });
    public_1.PublicClient.addOptions(body, { ...form });
    const order = await this.post("/tradingApi", {
      body,
    });
    return order;
  }
  /**
   * Cancel an order you have placed in a given market.
   */
  async cancelOrder(form) {
    const command = "cancelOrder";
    const body = new URLSearchParams({ command });
    if ("clientOrderId" in form) {
      const { clientOrderId } = form;
      public_1.PublicClient.addOptions(body, { clientOrderId });
    } else {
      const { orderNumber } = form;
      public_1.PublicClient.addOptions(body, { orderNumber });
    }
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Cancel all open orders in a given market or, if no market is provided, all open orders in all markets.
   */
  async cancelAllOrders(form = {}) {
    const command = "cancelAllOrders";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Cancels an order and places a new one of the same type in a single atomic transaction.
   */
  async moveOrder(form) {
    const command = "moveOrder";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Immediately place a withdrawal for a given currency.
   */
  async withdraw(form) {
    const command = "withdraw";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Get your current trading fees and trailing 30-day volume in BTC.
   */
  async getFeeInfo() {
    const command = "returnFeeInfo";
    const body = new URLSearchParams({ command });
    const info = await this.post("/tradingApi", { body });
    return info;
  }
  /**
   * Get your balances sorted by account.
   */
  async getAccountBalances(form = {}) {
    const command = "returnAvailableAccountBalances";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const balances = await this.post("/tradingApi", {
      body,
    });
    return balances;
  }
  /**
   * Get your current tradable balances for each currency in each market for which margin trading is enabled.
   */
  async getTradableBalances() {
    const command = "returnTradableBalances";
    const body = new URLSearchParams({ command });
    const balances = await this.post("/tradingApi", {
      body,
    });
    return balances;
  }
  /**
   * Transfer funds from one account to another.
   */
  async transferBalance(form) {
    const command = "transferBalance";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Get a summary of your entire margin account.
   */
  async getMarginSummary() {
    const command = "returnMarginAccountSummary";
    const body = new URLSearchParams({ command });
    const summary = await this.post("/tradingApi", { body });
    return summary;
  }
  /**
   * Place a margin buy order in a given market.
   */
  async marginBuy({ currencyPair = this.currencyPair, ...form }) {
    const command = "marginBuy";
    const body = new URLSearchParams({ command, currencyPair });
    public_1.PublicClient.addOptions(body, { ...form });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Place a margin sell order in a given market.
   */
  async marginSell({ currencyPair = this.currencyPair, ...form }) {
    const command = "marginSell";
    const body = new URLSearchParams({ command, currencyPair });
    public_1.PublicClient.addOptions(body, { ...form });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Get information about your margin position in a given market.
   */
  async getMarginPosition({ currencyPair = this.currencyPair } = {}) {
    const command = "getMarginPosition";
    const body = new URLSearchParams({ command, currencyPair });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Close your margin position in a given market using a market order.
   */
  async closeMarginPosition({ currencyPair = this.currencyPair } = {}) {
    const command = "closeMarginPosition";
    const body = new URLSearchParams({ command, currencyPair });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Create a loan offer for a given currency.
   */
  async createLoanOffer(form) {
    const command = "createLoanOffer";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Cancel a loan offer.
   */
  async cancelLoanOffer(form) {
    const command = "cancelLoanOffer";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const response = await this.post("/tradingApi", {
      body,
    });
    return response;
  }
  /**
   * Get your open loan offers for each currency.
   */
  async getOpenLoanOffers() {
    const command = "returnOpenLoanOffers";
    const body = new URLSearchParams({ command });
    const offers = await this.post("/tradingApi", {
      body,
    });
    return offers;
  }
  /**
   * Get your active loans for each currency.
   */
  async getActiveLoans() {
    const command = "returnActiveLoans";
    const body = new URLSearchParams({ command });
    const loans = await this.post("/tradingApi", {
      body,
    });
    return loans;
  }
  /**
   * Get your lending history.
   */
  async getLendingHistory(form = {}) {
    const command = "returnLendingHistory";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const items = await this.post("/tradingApi", {
      body,
    });
    return items;
  }
  /**
   * Toggle the autoRenew setting on an active loan.
   */
  async toggleAutoRenew(form) {
    const command = "toggleAutoRenew";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const result = await this.post("/tradingApi", {
      body,
    });
    return result;
  }
  /**
   * Swap `fromCurrency` to `toCurrency` if the currency pair is available.
   */
  async swapCurrencies(form) {
    const command = "swapCurrencies";
    const body = new URLSearchParams({ command });
    public_1.PublicClient.addOptions(body, { ...form });
    const result = await this.post("/tradingApi", { body });
    return result;
  }
  get nonce() {
    return this.#nonce;
  }
  set nonce(nonce) {
    this.#nonce = nonce;
  }
}
exports.AuthenticatedClient = AuthenticatedClient;
