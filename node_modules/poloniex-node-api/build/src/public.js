"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicClient = exports.Headers = exports.ApiLimit = exports.DefaultPair = exports.ApiUri = void 0;
const rpc_request_1 = require("rpc-request");
exports.ApiUri = "https://poloniex.com";
exports.DefaultPair = "USDT_BTC";
exports.ApiLimit = 100;
exports.Headers = { "User-Agent": "poloniex-node-api-client" };
class PublicClient extends rpc_request_1.FetchClient {
  constructor({ currencyPair = exports.DefaultPair } = {}) {
    super(
      { headers: exports.Headers },
      { rejectNotOk: false, transform: "json", baseUrl: exports.ApiUri }
    );
    this.currencyPair = currencyPair;
  }
  async get(url) {
    const response = await super.get(url);
    if (response.error) {
      throw new Error(response.error);
    }
    return response;
  }
  /**
   * Retrieves summary information for each currency pair listed on the exchange.
   */
  async getTickers() {
    const command = "returnTicker";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command });
    const tickers = await this.get(url.toString());
    return tickers;
  }
  /**
   * Retrieves the 24-hour volume for all markets as well as totals for primary currencies.
   */
  async getVolume() {
    const command = "return24hVolume";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command });
    const volumes = await this.get(url.toString());
    return volumes;
  }
  /**
   * Get the order book for a given market.
   */
  async getOrderBook({
    currencyPair = this.currencyPair,
    depth = exports.ApiLimit,
  } = {}) {
    const command = "returnOrderBook";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command, currencyPair, depth });
    const orderBook = await this.get(url.toString());
    return orderBook;
  }
  /**
   * Get the past 200 trades for a given market, or up to 1,000 trades between a range `start` and `end`.
   */
  async getTradeHistory({ currencyPair = this.currencyPair, ...rest } = {}) {
    const command = "returnTradeHistory";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command, currencyPair, ...rest });
    const trades = await this.get(url.toString());
    return trades;
  }
  /**
   * Get candlestick chart data.
   */
  async getChartData({ currencyPair = this.currencyPair, ...rest }) {
    const command = "returnChartData";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command, currencyPair, ...rest });
    const candles = await this.get(url.toString());
    return candles;
  }
  async getCurrencies({ includeMultiChainCurrencies = false } = {}) {
    const command = "returnCurrencies";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command, includeMultiChainCurrencies });
    const currencies = await this.get(url.toString());
    return currencies;
  }
  /**
   * Get the list of loan offers and demands for a given currency.
   */
  async getLoanOrders(qs) {
    const command = "returnLoanOrders";
    const url = new URL("/public", exports.ApiUri);
    PublicClient.addOptions(url, { command, ...qs });
    const loans = await this.get(url.toString());
    return loans;
  }
  static addOptions(target, data) {
    const searchParams = target instanceof URL ? target.searchParams : target;
    for (const key in data) {
      const value = data[key];
      if (typeof value !== "undefined") {
        searchParams.append(key, value.toString());
      }
    }
  }
}
exports.PublicClient = PublicClient;
